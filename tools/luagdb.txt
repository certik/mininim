# Lua GDB Helpers
# Copyright (c) 2010 Michal Kottman
#
# Copyright (c) 2017 Bruno FÃ©lix Rezende Ribeiro <oitofelix@gnu.org>
# Adapted to Lua 5.0; Improved functionality; Fixed bugs;
#
# License: MIT

define luavalue
	if $argc == 0
		help luavalue
	else
		if $argc == 2
			set $L = $arg1
		else
			set $L = L
		end
		print $L->base + ($arg0 - 1)
	end
end
document luavalue
	luavalue <index> [L]
	Provides a pointer to a TObject from a stack index. By default, uses the current variable
	L as a lua_State pointer, but can be specified as the second argument. The return value
	is printed.
end

define luaprinttable
	if $argc == 0
		help luaprinttable
	else
		if $argc == 2
			set $L = $arg1
		else
			set $L = L
		end
		printf " { "
		set $t = (Table *) $arg0
		set $node = $t->node
		set $i = 0
		set $last = 1 << $t->lsizenode
		# hash part
		while $i < $last
			set $node = $t->node + $i
			set $key = $node->i_key
			if $key.tt > 0
				if $key.tt == 4
					# string key
					set $ts = &($key.value->gc->ts)
					set $str = (char *)($ts + 1)
					printf "%s = ", $str
				else
					printf "<%s> = ", lua_typename($L, $key.tt)
				end
				set $val = &($node->i_val)
				luaprint $val
				printf ",\n"
			end
			set $i = $i + 1
		end
		# array part
		set $i = 0
		while $i < $t->sizearray
			set $val = $t->array + $i
			luaprint $val
			printf ", "
			set $i = $i + 1
		end
		printf " } "
	end
end
document luaprinttable
	luaprinttable <table> [L]
	Pretty-prints a Lua Table. Expects a pointer to Table.
end

define luaprint
	if $argc == 0
		help luaprint
	else
		if $argc == 3
			set $L = $arg2
		else
			set $L = L
		end
		set $v = $arg0
		set $val = &($v.value)
		set $type = $v.tt

		if $type == 0
			printf "nil"
		end
		# boolean
		if $type == 1
			if $val->b > 0
				printf "true"
			else
				printf "false"
			end
		end
		# lightudata
		if $type == 2
			printf "<ludata>%p", $val->p
		end
		# number
		if $type == 3
			printf "%f", $val->n
		end
		# string
		if $type == 4
			set $ts = &($val->gc->ts)
			set $str = (char *)($ts + 1)
			printf "'%s'", $str
		end
		# table
		if $type == 5
			set $tab = &($val->gc->h)
			printf "<tab> %p ", $tab
			if $arg1 == 1
				luaprinttable $tab $L
				if $tab.metatable
					printf " metatable="
					luaprinttable $tab.metatable $L
				end
			end
		end
		# userdata
		if $type == 7
			set $uv = $val->gc.u->uv
			printf "<udata> %p size=%d", &($val->gc.u) + 1, $uv.len
			if $arg1 == 1 && $uv.metatable
				printf " metatable="
				luaprinttable $uv.metatable $L
			end
			# if $arg1 == 1 && $uv.env
			# 	printf " env="
			# 	luaprinttable $uv.env $L
			# end
		end
		# other
		if $type > 5 && $type != 7
			printf "<%s> %p", lua_typename($L, $type), $val->p
		end
	end
end
document luaprint
	luaprint <value> [verbose] [L]
	Pretty-prints a TObject passed as argument. Expects a pointer to a TObject. When verbose is 1,
	expands tables, metatables and userdata environments.
end

define luastack
	if $argc == 0
		set $L = L
	else
		set $L = $arg0
	end
	printf "Lua stack trace: %d items\n", lua_gettop($L)
	set $ptr = $L->base
	set $idx = 1
	while $ptr < $L->top
		printf "%03d: ", $idx
		luaprint $ptr 0 $L
		printf "\n"
		set $ptr = $ptr + 1
		set $idx = $idx + 1
	end
end
document luastack
	luastack [L]
	Prints values on the Lua C stack. Without arguments, uses the current value of "L"
	as the lua_State*. You can provide an alternate lua_State as the first argument.
end

define luatrace
	if $argc == 0
		set $L = L
	else
		set $L = $arg0
	end
  set $code = "return debug.traceback()"
	if luaL_loadbuffer ($L, $code, strlen ($code), "gdb") == 0
		if lua_pcall($L, 0, 1, 0) == 0
			printf "%s\n", lua_tostring ($L, -1)
		else
			printf "ERROR: %s\n", lua_tostring ($L, -1)
		end
		call lua_settop ($L, -2)
	end
end
document luatrace
	luatraceback [L]
	Dumps Lua execution stack, as debug.traceback() does. Without
	arguments, uses the current value of "L" as the
	lua_State*. You can provide an alternate lua_State as the
	first argument.
end
